pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'
        ECR_URL = '932549231491.dkr.ecr.us-east-1.amazonaws.com'
        IMAGE_TAG = "node-app:vote-v${env.BUILD_NUMBER}"
        IMAGE_NAME = "${ECR_URL}/${IMAGE_TAG}"
    }

    stages {
        stage('Clone Repo') {
            steps {
                git credentialsId: 'github-creds', url: 'https://github.com/GeekZeno/upgrad_assignment.git', branch: 'main'
            }
        }

        stage('Build and Push on Remote Server') {
            steps {
                sshagent(['app-key']) {
                    sh """
                        ssh -o StrictHostKeyChecking=no ubuntu@10.100.2.89 << 'EOF'
                            set -e

                            cd upgrad_assignment/vote || { echo "❌ Failed to enter vote directory"; exit 1; }

                            echo "🔐 Logging into ECR..."
                            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_URL}

                            echo "🔧 Building Docker image: ${IMAGE_NAME}"
                            docker build -t ${IMAGE_NAME} .

                            echo "📤 Pushing image to ECR..."
                            docker push ${IMAGE_NAME}

                            echo "✅ Image built and pushed: ${IMAGE_NAME}"
EOF
                    """
                }
            }
        }

        stage('Deploy to App Host') {
            steps {
                sshagent(['app-key']) {
                    sh """
                        ssh -o StrictHostKeyChecking=no ubuntu@10.100.2.89 << 'EOF'
                            set -e

                            echo "🎯 Pulling latest image from ECR..."
                            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_URL}
                            docker pull ${IMAGE_NAME}

                            echo "🔍 Checking for existing vote-app container..."
                            EXISTING_CONTAINER=\$(docker ps -a -q --filter "name=vote-app")

                            if [ -n "\$EXISTING_CONTAINER" ]; then
                                echo "⏹️ Stopping existing container: \$EXISTING_CONTAINER"
                                docker stop \$EXISTING_CONTAINER || true

                                echo "🗑️ Removing existing container"
                                docker rm \$EXISTING_CONTAINER || true
                            else
                                echo "🟢 No existing container found."
                            fi

                            echo "🚀 Starting new container..."
                            docker run -d \\
                                --name vote-app \\
                                -p 5000:80 \\
                                ${IMAGE_NAME}

                            echo "✅ Deployment complete!"
EOF
                    """
                }
            }
        }
    }
}
